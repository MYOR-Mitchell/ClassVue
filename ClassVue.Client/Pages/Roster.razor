@using ClassVue.Client.Model
@page "/roster"

<h1>Roster</h1>
<main>
    <div class="modal fade" id="addStudentModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Student</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@this" OnValidSubmit="AddStudent">
                        <div class="mb-3">
                            <label for="firstName" class="form-label">First Name</label>
                            <input type="text" class="form-control" id="firstName" @bind="FirstName" placeholder="Enter first name" required>
                        </div>
                        <div class="mb-3">
                            <label for="lastName" class="form-label">Last Name</label>
                            <input type="text" class="form-control" id="lastName" @bind="LastName" placeholder="Enter last name" required>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Submit</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

    <ul class="studentWrap">
        @foreach (var student in Students)
        {
            <li class="studentList">@student.FirstName @student.LastName</li>
        }
    </ul>

    <div class="addBtn">
        <button type="button" class="btn btn-primary adjust-button" data-bs-toggle="modal" data-bs-target="#addStudentModal">
            Add Student
        </button>
    </div>

</main>

@code {
    private string FirstName { get; set; }
    private string LastName { get; set; }
    private List<Student> Students { get; set; } = new List<Student>();

    private async Task AddStudent()
    {
        var newStudent = new Student
            {
                FirstName = this.FirstName,
                LastName = this.LastName
            };
        Students.Add(newStudent);

        FirstName = string.Empty;
        LastName = string.Empty;

        await JSRuntime.InvokeVoidAsync("setFocus", "firstName");
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }
}
